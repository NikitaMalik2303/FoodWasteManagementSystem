-- Create Tables
CREATE TABLE store (
    storeid INT PRIMARY KEY,
    location VARCHAR(50),
    store_name VARCHAR(50)
);

CREATE TABLE category (
    categoryid INT PRIMARY KEY,
    categoryname VARCHAR(50)
);

CREATE TABLE manager (
    managerid INT,
    contact_number VARCHAR(15),
    name VARCHAR(50),
    emailaddress VARCHAR(50),
    storeid INT,
    FOREIGN KEY (storeid) REFERENCES store(storeid),
    PRIMARY KEY (managerid, storeid)
);

CREATE TABLE ngo (
    ngoid INT PRIMARY KEY,
    ngo_name VARCHAR(50),
    contactinfo VARCHAR(15)
);

CREATE TABLE donation (
    donationid INT PRIMARY KEY,
    donation_date DATE,
    ngoid INT,
    managerid INT,
    storeid INT,
    FOREIGN KEY (ngoid) REFERENCES ngo(ngoid),
    FOREIGN KEY (managerid) REFERENCES manager(managerid),
    FOREIGN KEY (storeid) REFERENCES store(storeid)
);

CREATE TABLE items (
    price DECIMAL(10, 2),
    itemname VARCHAR(50),
    itemid INT PRIMARY KEY,
    discount DECIMAL(5, 2),
    expiry_date DATE,
    categoryid INT,
    highlight_status BOOLEAN,
    FOREIGN KEY (categoryid) REFERENCES category(categoryid)
);

CREATE TABLE storehas (
    storeid INT,
    categoryid INT,
    PRIMARY KEY (storeid, categoryid),
    FOREIGN KEY (storeid) REFERENCES store(storeid),
    FOREIGN KEY (categoryid) REFERENCES category(categoryid)
);

CREATE TABLE donation_contains (
    donationid INT,
    itemid INT,
    PRIMARY KEY (donationid, itemid),
    FOREIGN KEY (donationid) REFERENCES donation(donationid),
    FOREIGN KEY (itemid) REFERENCES items(itemid)
);

CREATE TABLE notifications (
    notification_id INT PRIMARY KEY AUTO_INCREMENT,
    item_id INT,
    notification_type VARCHAR(50),
    message TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (item_id) REFERENCES items(itemid)
);



-- Insert Dummy Data
INSERT INTO store VALUES (1, 'Manipal', 'SuperMart');
INSERT INTO store VALUES (2, 'Delhi', 'UdupiHotel');
INSERT INTO store VALUES (3, 'Bangalore', 'GreenBasket');
INSERT INTO store VALUES (4, 'Chennai', 'FMart');
INSERT INTO store VALUES (5, 'Kolkata', 'VinayMart');
INSERT INTO store VALUES (6, 'Udupi', 'ViMart');
INSERT INTO store VALUES (7, 'Manipal', 'Arerp');


INSERT INTO category VALUES (1, 'Grains');
INSERT INTO category VALUES (2, 'Diary');
INSERT INTO category VALUES (3, 'Cooked');
INSERT INTO category VALUES (4, 'Vegetables &Fruits');
INSERT INTO category VALUES (5, 'Meat');
INSERT INTO category VALUES (6, 'Bakery');

--   managerid  contact_number name  emailaddress storeid 

-- 1,  'Rajesh Kumar' 1,2,3(only manager who is managing 3 stores)
-- 2,  'Pooja Singh'  4 
-- 3,  'Amit Sharma' 5 
-- 4,  'Deepika Patel 6 
-- 5,  'Rahul Verma' 7
INSERT INTO manager VALUES (1, '9876543210', 'Rajesh Kumar', 'rajesh@example.com', 1);
INSERT INTO manager VALUES (1, '9876543210', 'Rajesh Kumar', 'rajesh@example.com', 2);
INSERT INTO manager VALUES (1, '9876543210', 'Rajesh Kumar', 'rajesh@example.com', 3);

INSERT INTO manager VALUES (2, '8765432109', 'Pooja Singh', 'pooja@example.com', 4);
INSERT INTO manager VALUES (3, '7654321098', 'Amit Sharma', 'amit@example.com', 5);
INSERT INTO manager VALUES (4, '6543210987', 'Deepika Patel', 'deepika@example.com', 6);
INSERT INTO manager VALUES (5, '5432109876', 'Rahul Verma', 'rahul@example.com', 7);

INSERT INTO ngo VALUES (1, 'Helping Hands', '9876541230');
INSERT INTO ngo VALUES (2, 'Care for All', '8765430123');
INSERT INTO ngo VALUES (3, 'Hope Foundation', '7654329012');
INSERT INTO ngo VALUES (4, 'Green Earth', '6543218901');
INSERT INTO ngo VALUES (5, 'Joy of Giving', '5432107890');


INSERT INTO storehas VALUES (1, 1);
INSERT INTO storehas VALUES (1, 2);
INSERT INTO storehas VALUES (1, 3);
INSERT INTO storehas VALUES (1, 4);
INSERT INTO storehas VALUES (1, 6);
INSERT INTO storehas VALUES (1, 5);

INSERT INTO storehas VALUES (2, 1);
INSERT INTO storehas VALUES (2, 2);
INSERT INTO storehas VALUES (2, 3);



INSERT INTO storehas VALUES (3, 3);
INSERT INTO storehas VALUES (3, 4);
INSERT INTO storehas VALUES (3, 5);
INSERT INTO storehas VALUES (3, 6);

INSERT INTO storehas VALUES (4, 1);
INSERT INTO storehas VALUES (4, 2);
INSERT INTO storehas VALUES (4, 5);
INSERT INTO storehas VALUES (4, 6);


INSERT INTO storehas VALUES (5, 1);
INSERT INTO storehas VALUES (5, 2);
INSERT INTO storehas VALUES (5, 4);

INSERT INTO storehas VALUES (6, 1);
INSERT INTO storehas VALUES (6,2 );
INSERT INTO storehas VALUES (6, 4);

INSERT INTO storehas VALUES (7, 1);
INSERT INTO storehas VALUES (7, 2);
INSERT INTO storehas VALUES (7, 4);


-- 1, 'Helping Hands'
-- 2, 'Care for All'
-- 3, 'Hope Foundation'
-- 4, 'Green Earth'
-- 5, 'Joy of Giving


-- 1,  'Rajesh Kumar' 1,2,3(only manager who is managing 3 stores)
-- 2,  'Pooja Singh'  4 
-- 3,  'Amit Sharma' 5 
-- 4,  'Deepika Patel 6
-- 5,  'Rahul Verma' 7


--SuperMart
-- 'UdupiHotel'
--  'GreenBasket'
-- 'FMart'f
-- 'VinayMart'
--  donationid , itemid  

--  donationid   donation_date     ngoid      managerid     storeid 
-- manager1 has done 3 donations (store1,2,3)

INSERT INTO donation VALUES (1, '2023-09-14', 1, 1, 1);
INSERT INTO donation VALUES (2, '2023-11-22', 2, 1, 2);
INSERT INTO donation VALUES (3, '2023-11-20', 1, 1, 3);
INSERT INTO donation VALUES (4, '2023-08-25', 4, 2, 4);
INSERT INTO donation VALUES (5, '2023-09-30', 5, 3, 5);
INSERT INTO donation VALUES (6, '2023-09-31', 4, 4, 6);
INSERT INTO donation VALUES (7, '2023-11-21', 2, 5, 7);

store1
INSERT INTO donation_contains VALUES (1,1 );
INSERT INTO donation_contains VALUES (1, 2);
INSERT INTO donation_contains VALUES (1, 40);
INSERT INTO donation_contains VALUES (1, 7);
INSERT INTO donation_contains VALUES (1,10 );



INSERT INTO donation_contains VALUES (2, 7);
INSERT INTO donation_contains VALUES (2,10 );
INSERT INTO donation_contains VALUES (2,13 );
INSERT INTO donation_contains VALUES (2,14 );
INSERT INTO donation_contains VALUES (2,16 );
INSERT INTO donation_contains VALUES (2, 5);

INSERT INTO donation_contains VALUES (3,19 );
INSERT INTO donation_contains VALUES (3,25 );
INSERT INTO donation_contains VALUES (3,36 );
INSERT INTO donation_contains VALUES (3,32 );

INSERT INTO donation_contains VALUES (4,1 );
INSERT INTO donation_contains VALUES (4, 5);
INSERT INTO donation_contains VALUES (4,16 );
INSERT INTO donation_contains VALUES (4,28 );

INSERT INTO donation_contains VALUES (5,12 );
INSERT INTO donation_contains VALUES (5,15 );
INSERT INTO donation_contains VALUES (5,20 );

INSERT INTO donation_contains VALUES (6,1 );
INSERT INTO donation_contains VALUES (6,2);
INSERT INTO donation_contains VALUES (6, 4);

INSERT INTO donation_contains VALUES (7,12 );
INSERT INTO donation_contains VALUES (7,13 );
INSERT INTO donation_contains VALUES (7,15 );




--                      price itemname  itemid discount expiry_date categoryid 
--item ids range from 1 to 39
-- category1 -> 1 to 5 
-- category2 -> 6 to 17 
-- category3-> 40
-- category4 -> 18 to 26 
-- category5 -> 27 to 31 
-- category6 -> 32 to 39

INSERT INTO items VALUES (6.99, 'Lentils', 1, 1, '2023-12-03', 1, FALSE);
INSERT INTO items VALUES (89.99, 'BasmatiRice', 2, 7, '2023-12-05', 1,  FALSE);
INSERT INTO items VALUES (99.99, 'SonaMasoori', 3, 8, '2023-12-10', 1,  FALSE);
INSERT INTO items VALUES (12.99, 'Quinoa', 4, 1, '2023-12-06', 1, TRUE);
INSERT INTO items VALUES (45.99, 'Wheat Flour', 5, 7, '2023-12-10', 1, FALSE);
INSERT INTO items VALUES (399.99, 'Paneer', 6, 10, '2023-12-31', 2, FALSE);
INSERT INTO items VALUES (29.99, 'Milk', 7, 5, '2023-12-31', 2, FALSE);
INSERT INTO items VALUES (49.99, 'Ghee', 8, 5, '2023-12-02', 2, FALSE);
INSERT INTO items VALUES (19.99, 'Butter', 9, 3, '2023-11-30', 2, FALSE);
INSERT INTO items VALUES (24.99, 'Eggs', 10, 0.5, '2023-11-26', 2, FALSE);
INSERT INTO items VALUES (34.99, 'Yogurt', 11, 4, '2023-12-08', 2, FALSE);
INSERT INTO items VALUES (14.99, 'Cheese', 12, 7, '2023-12-12', 2, FALSE);
INSERT INTO items VALUES (29.99, 'Milk Powder', 13, 5, '2023-12-08', 2, FALSE);
INSERT INTO items VALUES (22.99, 'Cream Cheese', 14, 3, '2023-12-15', 2, FALSE);
INSERT INTO items VALUES (38.99, 'Buttermilk', 15, 4, '2023-12-04', 2, FALSE);
INSERT INTO items VALUES (14.99, 'Margarine', 16, 3, '2023-12-05', 2, FALSE);
INSERT INTO items VALUES (399.99, 'Paneer', 17, 10, '2023-12-05', 2, FALSE);
INSERT INTO items VALUES (2.99, 'Cucumber', 18, 2, '2023-12-31', 4, FALSE);
INSERT INTO items VALUES (4.99, 'Tomatoes', 19, 2, '2023-11-29', 4, FALSE);
INSERT INTO items VALUES (1.99, 'Potatoes', 20, 1, '2023-11-30', 4, FALSE);
INSERT INTO items VALUES (3.99, 'Onions', 21, 2, '2023-12-01', 4, FALSE);
INSERT INTO items VALUES (2.99, 'Cucumber', 22, 2, '2023-12-02', 4, FALSE);
INSERT INTO items VALUES (2.49, 'Carrots', 23, 2, '2023-11-29', 4, FALSE);
INSERT INTO items VALUES (1.29, 'Lemons', 24, 1, '2023-12-01', 4, FALSE);
INSERT INTO items VALUES (5.99, 'Avocado', 25, 2, '2023-12-02', 4, FALSE);
INSERT INTO items VALUES (3.79, 'Spinach', 26, 2, '2023-11-30', 4, FALSE);
INSERT INTO items VALUES (99.99, 'Chicken', 27, 15, '2023-11-28', 5, FALSE);
INSERT INTO items VALUES (149.99, 'Mutton', 28, 15, '2023-11-30', 5, FALSE);
INSERT INTO items VALUES (64.99, 'Salmon', 29, 12, '2023-11-29', 5, FALSE);
INSERT INTO items VALUES (29.99, 'Ground Beef', 30, 15, '2023-11-30', 5, FALSE);
INSERT INTO items VALUES (99.99, 'Fish', 31, 12,'2023-11-28', 5,  FALSE);

INSERT INTO items VALUES (149.99, 'Pastries', 32, 15,'2023-12-07', 6,  FALSE);
INSERT INTO items VALUES (149.99, 'Bread', 33, 8,'2023-12-02', 6,  FALSE);
INSERT INTO items VALUES (8.99, 'Baguette', 34, 8,'2023-12-05', 6,  FALSE);
INSERT INTO items VALUES (24.99, 'Croissants', 35, 10,'2023-12-02', 6,  FALSE);
INSERT INTO items VALUES (14.99, 'Donuts', 36, 15,'2023-12-07', 6,  FALSE);
INSERT INTO items VALUES (149.99, 'Cake',   37, 10,'2023-12-01', 6,  FALSE);
INSERT INTO items VALUES (99.99, 'Chocolate Truffle', 38, 10,'2023-12-12', 6,  FALSE);
INSERT INTO items VALUES (149.99, 'Bread',    39,  8, '2023-12-31',6,  FALSE );

INSERT INTO items VALUES (299.99, 'BIRYANI',    40,  8, '2023-11-24',3 ,  FALSE);



--sql queries
======================================
select * from manager natural join store
where managerid = username;

=======================================


SELECT i.itemid, i.expiry_date, i.itemname, s.categoryid
FROM items i JOIN storehas s ON i.categoryid = s.categoryid
WHERE s.storeid = 1 
GROUP BY i.itemid, i.expiry_date, i.itemname, s.categoryid;


========================================
DELIMITER //
CREATE PROCEDURE HighlightExpiringItems(IN storeId INT)
BEGIN
  DECLARE currentDate DATE;
  SET currentDate = CURDATE();

  UPDATE items
  SET highlight_status = TRUE
  WHERE expiry_date < currentDate + INTERVAL 7 DAY
    AND categoryid IN (SELECT categoryid FROM storehas WHERE storeid = storeId);
END //
DELIMITER ;

================================================

DROP PROCEDURE IF EXISTS HighlightExpiringItems;

=======================================================

DROP PROCEDURE IF EXISTS ApplyDiscount;
DELIMITER //

CREATE PROCEDURE ApplyDiscount(IN p_itemId INT, IN p_discount INT)
BEGIN
  DECLARE done INT DEFAULT FALSE;
  DECLARE cur_item CURSOR FOR SELECT itemid, price FROM items WHERE itemid = p_itemId;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

  DECLARE v_itemId INT;
  DECLARE v_price DECIMAL(10, 2);

  OPEN cur_item;

  read_loop: LOOP
    FETCH cur_item INTO v_itemId, v_price;
    IF done THEN
      LEAVE read_loop;
    END IF;

    IF v_price IS NOT NULL THEN
      DECLARE discountedPrice DECIMAL(10, 2);
      SET discountedPrice = v_price * (1 - p_discount / 100);

      UPDATE items
      SET price = discountedPrice
      WHERE itemid = v_itemId;
    END IF;
  END LOOP;

  CLOSE cur_item;
END //

DELIMITER ;


==============================================


DELIMITER //

CREATE TRIGGER after_item_price_update
AFTER UPDATE ON items
FOR EACH ROW
BEGIN
    IF NEW.price <> OLD.price THEN
        INSERT INTO notifications (item_id, notification_type, message)
        VALUES (NEW.itemid, 'PriceUpdate', CONCAT('The price of ', NEW.itemname, ' has been updated. New price: ', NEW.price));
    END IF;
END //

DELIMITER ;

====================================================

DELIMITER //

CREATE TRIGGER after_donation_insert
AFTER INSERT ON donation
FOR EACH ROW
BEGIN
    INSERT INTO notifications (item_id, notification_type, message)
    VALUES (NEW.ngoid, 'DonationAdded', CONCAT('New donation added for NGO ID: ', NEW.ngoid));
END //

DELIMITER ;


=================================================


DELIMITER //

CREATE PROCEDURE GetNotifications()
BEGIN
  SELECT * FROM notifications;
END //

DELIMITER ;


DROP PROCEDURE IF EXISTS GetNotifications;
DELIMITER //

CREATE PROCEDURE GetNotifications()
BEGIN
  SELECT *
  FROM notifications n;
END //

DELIMITER ;

============================================

DELIMITER //

CREATE PROCEDURE InsertDonation(
  IN p_ngoid INT,
  IN p_managerid INT,
  IN p_storeid INT,
  IN p_itemid INT, 
  IN p_donationid INT
)
BEGIN
  INSERT INTO donation (donation_date, ngoid, managerid, storeid, donationid) 
  VALUES (CURDATE(), p_ngoid, p_managerid, p_storeid, p_donationid);
  INSERT INTO donation_contains (donationid, itemid) VALUES (p_donationid, p_itemid);
  
END //

DELIMITER ;

DROP PROCEDURE IF EXISTS InsertDonation;
=====================================

DROP PROCEDURE IF EXISTS GetDonationStats;

DELIMITER //

CREATE PROCEDURE GetDonationStats()
BEGIN
  SELECT ngoid,
    (SELECT COUNT(donationid) FROM donation WHERE ngo.ngoid = donation.ngoid) AS donation_count
  FROM ngo;
END //

DELIMITER ;
=============================================

DROP PROCEDURE IF EXISTS GetMonthlyDonationStats;

DELIMITER //

CREATE PROCEDURE GetMonthlyDonationStats()
BEGIN
  SELECT ngoid,
    (SELECT COUNT(donationid)
     FROM donation
     WHERE ngo.ngoid = donation.ngoid
       AND MONTH(donation_date) = MONTH(CURRENT_DATE())
       AND YEAR(donation_date) = YEAR(CURRENT_DATE())) AS monthly_donation_count
  FROM ngo;
END //

DELIMITER ;

================================================

DELIMITER //

CREATE PROCEDURE GetWeeklyDonationStats()
BEGIN
  SELECT ngoid,
    (SELECT COUNT(donationid)
     FROM donation
     WHERE ngo.ngoid = donation.ngoid
       AND MONTH(donation_date) = MONTH(CURRENT_DATE())
       AND YEARWEEK(donation_date) = YEARWEEK(CURRENT_DATE())
       AND YEAR(donation_date) = YEAR(CURRENT_DATE())) AS monthly_donation_count
  FROM ngo;
END //

DELIMITER ;

=================================================


DROP PROCEDURE IF EXISTS GetDailyDonationStats;

DELIMITER //

CREATE PROCEDURE GetDailyDonationStats()
BEGIN
  SELECT ngoid,
    (SELECT COUNT(donationid)
     FROM donation
     WHERE ngo.ngoid = donation.ngoid
       AND MONTH(donation_date) = MONTH(CURRENT_DATE())
       AND YEARWEEK(donation_date) = YEARWEEK(CURRENT_DATE())
       AND YEAR(donation_date) = YEAR(CURRENT_DATE())) AS monthly_donation_count
  FROM ngo;
END //

DELIMITER ;

